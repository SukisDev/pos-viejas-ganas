generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/* ================================ */
/* Enums                            */
/* ================================ */

enum Role {
  ADMIN
  CASHIER
  CHEF
}

enum BeeperStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

enum OrderStatus {
  IN_KITCHEN
  READY
  DELIVERED
  CANCELLED
}

/* ================================ */
/* Usuarios                         */
/* ================================ */

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  name         String?
  passwordHash String?
  role         Role
  active       Boolean  @default(true)
  deleted      Boolean  @default(false)
  deletedAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  // Relaciones para pedidos
  ordersCreated   Order[] @relation("CashierOrders")
  ordersCompleted Order[] @relation("ChefOrders")
}

/* ================================ */
/* Beepers                          */
/* ================================ */

model Beeper {
  id        Int           @id
  status    BeeperStatus  @default(AVAILABLE)
  updatedAt DateTime      @default(now()) @updatedAt

  // Relación con pedidos
  orders Order[]
}

/* ================================ */
/* Correlativo diario               */
/* ================================ */

model DailyCounter {
  businessDate DateTime @id                  // clave: el día (UTC o tu TZ)
  lastValue    Int      @default(0)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

/* ================================ */
/* Productos                        */
/* ================================ */

model Product {
  id         String   @id @default(cuid())
  name       String
  price      Decimal  @db.Decimal(10, 2)
  category   String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  // Relación con items de pedido
  orderItems OrderItem[]
}

/* ================================ */
/* Pedidos                          */
/* ================================ */

model Order {
  id           String      @id @default(cuid())
  number       Int         // correlativo del día
  businessDate DateTime    @db.Date
  status       OrderStatus @default(IN_KITCHEN)
  total        Decimal     @db.Decimal(10, 2)
  deliveredAt  DateTime?
  notes        String?     // descripción del pedido

  // Foreign Keys
  beeperId  Int
  cashierId String
  chefId    String?

  // Relaciones
  beeper   Beeper      @relation(fields: [beeperId], references: [id])
  cashier  User        @relation("CashierOrders", fields: [cashierId], references: [id])
  chef     User?       @relation("ChefOrders", fields: [chefId], references: [id])
  items    OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessDate, number])
}

model OrderItem {
  id        String  @id @default(cuid())
  qty       Int
  unitPrice Decimal @db.Decimal(10, 2)
  lineTotal Decimal @db.Decimal(10, 2)
  notes     String? // descripción específica del item

  // Foreign Keys
  orderId   String
  productId String?  // null para productos custom

  // Para productos custom (no están en catálogo)
  customName String?

  // Relaciones
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
}

/* ================================ */
/* Sistema de créditos              */
/* ================================ */

model CreditCustomer {
  id        String   @id @default(cuid())
  name      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con transacciones
  transactions CreditTransaction[]
}

model CreditTransaction {
  id           String   @id @default(cuid())
  amount       Decimal  @db.Decimal(10, 2)
  description  String?
  businessDate DateTime @db.Date

  // Foreign Key
  customerId String

  // Relación
  customer CreditCustomer @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())

  @@index([businessDate])
}
