generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  name            String?
  role            Role
  passwordHash    String?
  email           String?  @unique
  resetToken      String?
  resetTokenExp   DateTime?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  ordersCreated   Order[]  @relation("CashierOrders")
  ordersCompleted Order[]  @relation("ChefOrders")
}

model Beeper {
  id        Int          @id
  updatedAt DateTime     @default(now()) @updatedAt
  status    BeeperStatus @default(AVAILABLE)
  orders    Order[]
}

model DailyCounter {
  businessDate DateTime @id
  lastValue    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Product {
  id         String      @id @default(cuid())
  name       String
  price      Decimal     @db.Decimal(10, 2)
  active     Boolean     @default(true)
  category   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  orderItems OrderItem[]
}

model Order {
  id           String      @id @default(cuid())
  number       Int
  businessDate DateTime    @db.Date
  status       OrderStatus @default(IN_KITCHEN)
  total        Decimal     @db.Decimal(10, 2)
  deliveredAt  DateTime?
  notes        String?
  beeperId     Int
  cashierId    String
  chefId       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  beeper       Beeper      @relation(fields: [beeperId], references: [id])
  cashier      User        @relation("CashierOrders", fields: [cashierId], references: [id])
  chef         User?       @relation("ChefOrders", fields: [chefId], references: [id])
  items        OrderItem[]

  @@index([businessDate, number])
}

model OrderItem {
  id         String   @id @default(cuid())
  qty        Int
  unitPrice  Decimal  @db.Decimal(10, 2)
  lineTotal  Decimal  @db.Decimal(10, 2)
  notes      String?
  orderId    String
  productId  String?
  customName String?
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product? @relation(fields: [productId], references: [id])
}

model CreditCustomer {
  id           String              @id @default(cuid())
  name         String
  active       Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  transactions CreditTransaction[]
}

model CreditTransaction {
  id           String         @id @default(cuid())
  amount       Decimal        @db.Decimal(10, 2)
  description  String?
  businessDate DateTime       @db.Date
  customerId   String
  createdAt    DateTime       @default(now())
  customer     CreditCustomer @relation(fields: [customerId], references: [id])

  @@index([businessDate])
}

enum Role {
  ADMIN
  CASHIER
  CHEF
}

enum BeeperStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

enum OrderStatus {
  IN_KITCHEN
  READY
  DELIVERED
  CANCELLED
}
